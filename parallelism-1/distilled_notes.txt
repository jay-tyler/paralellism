multiprocessing.Queue()
* instance.put([block, timeout]) --> put an item onto instance; used in place of 'return' for function.
* instance.get() --> get an item from instance; 

multiprocessing.Process(target, args) --> target is a function symbol, args an iterable provided to target
* instance.run() --> to run process
* instance.join() --> to exit a completeted process
* instance._identity --> can be used to refer to a unique process; also os.getpid() can be used (not sure if data 100% eq)

multiprocessing.Pool([processes, initializer, initargs, maxtasksperchild])
* instance.map() --> equivalent in function to builtin
* instance.apply() --> equivalent to builtin, which though nearly-deprecated, is meant to wrapperize before
args/kwargs unpacking was available
* Note: Pool uses 'return' statement in target function; it seems target fct for Process needs to directly interact with Queue
* Note2: maxtasksperchild init arg follows after a pattern found in Apache, mod_wsgi etc. By default,
the Python pool worker processes live for the duration of the pool's work Queue


